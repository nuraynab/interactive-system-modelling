load real-time-maude.maude

(tomod INFORMATION is

  protecting NAT .
  protecting STRING .

  sorts Fact Question Answer .
  sorts Domain BasicItem Item Goal .     --- an 'Item' can be either a 'BasicItem' or'Goal'
  subsort BasicItem < Item .        
  subsort Goal < Item .
  subsorts Fact Question Answer < BasicItem .

  sorts BasicItemSet ItemSet EmptyItemSet .
  subsort BasicItem < BasicItemSet .
  subsorts EmptyItemSet < BasicItemSet < ItemSet .
  subsort Item < ItemSet .
  op none : -> EmptyItemSet [ctor] .
  op _;_ : BasicItemSet BasicItemSet -> BasicItemSet [ctor assoc comm id: none format (b o n b)] .
  op _;_ : ItemSet ItemSet -> ItemSet [ctor ditto] .
  op _;_ : EmptyItemSet EmptyItemSet -> EmptyItemSet [ctor ditto] .

  op goal : Domain BasicItemSet -> Goal [ctor] .

  op domainFocus : Domain -> BasicItem [ctor] .

  sorts Category Attribute TypedAttribute .
  subsort String < Category < Attribute .
  subsort String < Domain .

  ops can_ is`a_ has_ : Attribute -> TypedAttribute [ctor] .
  ops cannot_ is`not`a_ has`not_ has_ : Attribute -> TypedAttribute [ctor] .
  op what`can_do? : Category -> Question [ctor] .
  ops can`a__? is`a__? has`a__? : Category Attribute -> Question [ctor] .
  op a__ : Category TypedAttribute -> Fact [ctor] .
  
  ops I`dont`know`if`a_can_ I`dont`know`if`a_is_ : Category Attribute -> Fact [ctor] .
  op I`dont`know`what`a_can`do : Category -> Fact [ctor] .

  op __ : Fact Nat -> Answer [ctor] .

  op _is`negative`of_ : TypedAttribute TypedAttribute -> Bool .

  var A : Attribute .
  vars TA1 TA2 : TypedAttribute .
  eq (cannot A) is negative of (can A) = true .
  eq (is not a A) is negative of (is a A) = true .
  eq (has not A) is negative of (has A) = true .
  eq TA1 is negative of TA2 = false [owise] .

  op isItemIn : Item ItemSet -> Bool .

  vars I1 I2 : Item .
  var IS : ItemSet .

  eq isItemIn(I1, I2 ; IS) = if I1 == I2 then true
                                else isItemIn(I1, IS) fi .
  eq isItemIn(I1, none) = false .

endtom)


(tomod TIMED-ITEMS is

   protecting INFORMATION .
   protecting STRING .
   protecting NAT-TIME-DOMAIN-WITH-INF .

   ops DECAY-TIME MAX-RETRIEVAL-TIME : -> TimeInf .
   eq DECAY-TIME = 100 .
   eq MAX-RETRIEVAL-TIME = 20 .

   op stmCapacity : -> Nat .
   eq stmCapacity = 7 .

   sorts TimedItem TimedItemSet TimedBasicItem FutureBasicItem .
   subsort TimedItem < TimedItemSet .

   op _<`decay_> : Item TimeInf -> TimedItem [ctor] .
   op _for_ : BasicItem TimeInf -> TimedBasicItem [ctor] .
   op _in_ : TimedBasicItem Time -> FutureBasicItem [ctor] .
   
   op emptyTIS : -> TimedItemSet [ctor] .
   op _;_ : TimedItemSet TimedItemSet -> TimedItemSet [ctor assoc comm id: emptyTIS format (b o n b)] .

   *** If time to decay has reached zero, the term is removed:
   eq ITEM:Item < decay 0 > = emptyTIS .

   op removeTime : TimedItemSet -> ItemSet .

   var I : Item .
   var TIS : TimedItemSet .
   var T : TimeInf .
   
   eq removeTime(emptyTIS) = none .
   eq removeTime((I < decay T >) ; TIS) =  I ; removeTime(TIS) .
   
endtom)


(tomod SENSORY-MEMORY is

  protecting NAT .
  protecting STRING .
  including TIMED-ITEMS .

  sorts SensoryMemory .

  op emptySensory : -> SensoryMemory [ctor] .

endtom)


(tomod PROCEDURAL-MEMORY is

  protecting NAT .
  protecting STRING .
  including TIMED-ITEMS .

  sorts ProceduralMemory .

  op emptyProcedural : -> ProceduralMemory [ctor] .

endtom)


(tomod SEMANTIC-MEMORY is

  protecting NAT .
  protecting STRING .
  including TIMED-ITEMS .
  
  sorts FactRepresentation SemanticMemory .
  subsort FactRepresentation < SemanticMemory .

  op emptySemantic : -> SemanticMemory .
  op _:_|-_->|_ : Domain Category Time TypedAttribute -> FactRepresentation [ctor format (!r o b o r o b o)] .
  op __ : SemanticMemory SemanticMemory -> SemanticMemory [ctor assoc comm id: emptySemantic format (o n o)] .

  op _is`negated`in_ : Fact SemanticMemory -> Bool .

  var M : Time .
  var D : Domain .
  var C : Category .
  var A : Attribute .
  vars TA1 TA2 : TypedAttribute .
  var S : SemanticMemory .

  eq ( a C TA1 ) is negated in ( ( D : C |- M ->| TA2 ) S ) = TA2 is negative of TA1 .
  eq ( a C TA1 ) is negated in S = false [owise] .

endtom)


(tomod ENVIRONMENT is

  including TIMED-ITEMS .

  sorts Perception Experiment Answered .
  subsorts Perception Experiment Answered < Msg .

  op perc : TimedBasicItem -> Perception [ctor format (n o)] .

  op exp : FutureBasicItem -> Experiment [ctor format (n o)] .

  op ans : TimedBasicItem -> Answered [ctor format (n o)] .

  var BI : BasicItem .
  
  eq perc(BI for 0) = none .

endtom)


(tomod HUMAN is

  including SENSORY-MEMORY .
  including PROCEDURAL-MEMORY .
  including SEMANTIC-MEMORY .
  including ENVIRONMENT .

  class Human | cognitiveLoad : Nat, --- size of short-time memory, maybe counting invisible "previous" stuff!
    shortTermMem : TimedItemSet,
    sensoryMem : SensoryMemory,
    proceduralMem : ProceduralMemory,
                semanticMem : SemanticMemory .

endtom)


(tomod EVOLUTION is

  including HUMAN .

  var H : Oid .
  var N : Nat .
  vars M M1 FT : Time .
  vars T T1 : TimeInf .
  vars D D1 D2 : Domain .
  vars C C1 C2 : Category .
  var Q : Question .
  var F : Fact .
  var G : Goal .
  vars A A1 : Attribute .
  vars TA TA1 : TypedAttribute .
  var BI : BasicItem .
  var I : Item .
  var TBI TBI1 : TimedBasicItem .
  var FBI : FutureBasicItem .
  var IS : ItemSet .
  var TIS : TimedItemSet .
  var FR : FactRepresentation .
  vars S S1 : SemanticMemory .
  var REST : Configuration .
  var B : Bool .
  
  op idle : Configuration Time -> Configuration [frozen (1)] .
  op idle : TimedItemSet Time -> TimedItemSet .
  op idle : TimedBasicItem Time -> TimedBasicItem .
  op idle : FutureBasicItem Time -> FutureBasicItem .

  eq idle(none, T) = none .
  eq idle(< H : Human | >  REST, T) = < H : Human | >  idle(REST, T) .
  eq idle(perc(TBI) REST, T) = perc(idle(TBI, T))  idle(REST, T) .
  eq idle(exp(FBI) REST, T) = exp(idle(FBI, T))  idle(REST, T) .
  eq idle(ans(TBI) REST, T) = ans(idle(TBI, T))  idle(REST, T) .

  eq idle(emptyTIS, T) = emptyTIS .
  eq idle((I < decay T1 >) ; TIS , T) = (I < decay (T1 monus T) >) ; idle(TIS, T) .
  eq idle(BI for T1, T) = BI for (T1 monus T) .
  eq idle(TBI in FT , T) = TBI in (FT monus T) .

  op timeToSuper : Category Category SemanticMemory -> TimeInf .
  eq timeToSuper(C, C, S) = 0 .
  eq timeToSuper(C, C1, (D : C |- M ->| (is a C1)) S) = M .
  ceq timeToSuper(C, C1, (D : C |- M ->| (is a C2)) S) = timeToSuper(C2, C1, S) + M if C =/= C1 .
  eq timeToSuper(C, C1, S) = INF [owise] .

  --- assuming that no supercategory of C has typed attribute 'can A'
  op canRetrievalTime : Category Attribute SemanticMemory -> TimeInf .
  eq canRetrievalTime(C, A, (D : C |- M ->| (can A)) S)  = M .
  ceq canRetrievalTime(C, A, (D : C1 |- M ->| (can A)) S) = M + timeToSuper(C, C1, S) if C =/= C1 .
  eq canRetrievalTime(C, A, S) = INF [owise] .

  op questionFound : TimedItemSet -> Bool .
  eq questionFound(emptyTIS) = false .
  eq questionFound((Q < decay T >) ; TIS) = true .
  eq questionFound((F < decay T >) ; TIS) = questionFound(TIS) .
  eq questionFound((G < decay T >) ; TIS) = questionFound(TIS) .

  op noQuestionFound :  TimedItemSet -> Bool .
  eq noQuestionFound(emptyTIS) = true .
  eq noQuestionFound((Q < decay T >) ; TIS) = false .
  eq noQuestionFound((F < decay T >) ; TIS) = noQuestionFound(TIS) .
  eq noQuestionFound((G < decay T >) ; TIS) = noQuestionFound(TIS) .

  op noExperimentStart : Configuration -> Bool .
  eq noExperimentStart(none) = true .
  eq noExperimentStart((exp(TBI in 0)) REST) = false .
  ceq noExperimentStart((exp(TBI in T1)) REST) = noExperimentStart(REST) if T1 > 0 .
  eq noExperimentStart((perc(TBI)) REST) = noExperimentStart(REST) .
  eq noExperimentStart(< H : Human | >  REST) = noExperimentStart(REST) .

  op noPerceptionAvailable : Configuration -> Bool .
  eq noPerceptionAvailable(none) = true .
  eq noPerceptionAvailable((perc(TBI)) REST) = false .
  eq noPerceptionAvailable((exp(FBI)) REST) = noPerceptionAvailable(REST) .
  eq noPerceptionAvailable(REST) = true [owise] .
  eq noPerceptionAvailable(< H : Human | >  REST) = noPerceptionAvailable(REST) .

crl [forgetSomethingIfSTMfull] :
    {< H : Human | shortTermMem : (BI < decay T >) ; TIS,
                    cognitiveLoad : N >
     REST}
  =>
    {< H : Human | shortTermMem : TIS, 
                    cognitiveLoad : sd(N, 1) >
     REST}
  if N > stmCapacity .


crl [tick] :
    {< H : Human | shortTermMem : TIS >
     REST}
  =>
    {< H : Human | shortTermMem : idle(TIS,1) >
     idle(REST,1)}
  in time 1
  if not questionFound(TIS) /\ noExperimentStart(REST) /\ noPerceptionAvailable(REST) .
---  if noQuestionFound(TIS) .
  

  rl [activate-perception] :
    {(exp ((BI for T) in 0))
     REST}
  =>
    {(perc (BI for T))
     REST} .


  crl [perceive] :
    {(perc (BI for T))
     < H : Human | cognitiveLoad : N,
      shortTermMem : TIS >
     REST}
  =>
    {< H : Human | cognitiveLoad : N + 1,
      shortTermMem : (BI < decay DECAY-TIME >) ; TIS >
     (perc (BI for T))
     REST}
   if IS := removeTime(TIS) /\
     not isItemIn(BI, IS) /\
     N + 1 <= stmCapacity .

  crl [can] :
    {< H : Human | cognitiveLoad : N,
       shortTermMem : TIS ; ((can a C A ?) < decay T1 >),
       sensoryMem : emptySensory,
       proceduralMem : emptyProcedural,
               semanticMem : S >
     REST}
  =>
    {< H : Human | cognitiveLoad : N + 1,
       shortTermMem : ((a C can A) < decay DECAY-TIME >) ; idle(TIS ; ((can a C A ?) < decay T1 >), T),
       sensoryMem : emptySensory,
       proceduralMem : emptyProcedural,
               semanticMem : S >
       (ans ((a C can A T) for INF))
    idle(REST,T)}
  in time T
  if IS := removeTime(TIS) /\
     not isItemIn(a C can A, IS) /\ T := canRetrievalTime(C, A, S) /\ T <= MAX-RETRIEVAL-TIME /\
     not ( ( a C can A ) is negated in S ) /\
     N + 1 <= stmCapacity .


  crl [cannot-explicit] :
    {< H : Human | cognitiveLoad : N,
       shortTermMem : TIS ; ((can a C A ?) < decay T1 >),
       sensoryMem : emptySensory,
       proceduralMem : emptyProcedural,
               semanticMem : (D : C |- M ->| (cannot A)) S >
     REST}
  =>
    {< H : Human | cognitiveLoad : N + 1,
       shortTermMem : ((a C cannot A) < decay DECAY-TIME >) ; idle(TIS ; ((can a C A ?) < decay T1 >), M),
       sensoryMem : emptySensory,
       proceduralMem : emptyProcedural,
               semanticMem : (D : C |- M ->| (cannot A)) S >
       (ans ((a C cannot A M) for INF))
    idle(REST,M)}
  in time M
  if IS := removeTime(TIS) /\ 
     not isItemIn(a C cannot A, IS) /\
     N + 1 <= stmCapacity .


  crl [cannot-implicit] :
    {< H : Human | cognitiveLoad : N,
       shortTermMem : TIS ; ((can a C A ?) < decay T1 >),
       sensoryMem : emptySensory,
       proceduralMem : emptyProcedural,
               semanticMem : (D : C1 |- M ->| (can A)) S >
     REST}
  =>
    {< H : Human | cognitiveLoad : N + 1,
       shortTermMem : ((a C cannot A) < decay DECAY-TIME >) ; idle(TIS ; ((can a C A ?) < decay T1 >), T),
       sensoryMem : emptySensory,
       proceduralMem : emptyProcedural,
               semanticMem : (D : C1 |- M ->| (can A)) S >
       (ans ((a C cannot A T) for INF))
    idle(REST,T)}
  in time T
  if IS := removeTime(TIS) /\
     not isItemIn(a C cannot A, IS) /\ not isItemIn(a C can A, IS) /\ T := timeToSuper(C1, C, S) + M /\
     T <= MAX-RETRIEVAL-TIME /\
     N + 1 <= stmCapacity .

endtom)


(tomod EXAMPLE-DOGS is

  including EVOLUTION .

  op initSemanticMem : -> SemanticMemory .





  ops init experiment-setting init-env : -> Configuration .

  op human : -> Oid .

  op aHuman : -> Object .

  eq aHuman = < human : Human | cognitiveLoad : 2,
                  shortTermMem : emptyTIS,
                  sensoryMem : emptySensory,
                  proceduralMem : emptyProcedural,
                              semanticMem : initSemanticMem > .   





  eq experiment-setting = (exp(((can a "basenji" "breath" ?) for 1) in 100))
                          (exp(((can a "dog" "move" ?) for 1) in 200))
                          (exp(((can a "dog" "bark" ?) for 1) in 300))
                          aHuman .

endtom)

(trew [1000] in EXAMPLE-DOGS : {init} in time <= 100 .)
---(trew [1000] in EXAMPLE-DOGS : {init-env} in time <= 100 .)
---(trew [1000] in EXAMPLE-DOGS : {experiment-setting} in time <= 302 .)

---(red not questionFound(can a "basenji" "breath" ? decay 100) .)

---(red isItemIn(can a "basenji" "breath" ?, removeTime(can "basenji" "breath" ? < decay 100 >)) .)

---(red  idle(perc(can a "basenji" "breath" ? for 2), 1) .)

---(red  not questionFound((can a "basenji" "breath" ? < decay 100 >) ; (can a "dog" "move" ? < decay 100 >)) .)

---(red  noQuestionFound((can a "basenji" "breath" ? < decay 100 >) ; (can a "dog" "move" ? < decay 100 >)) .)

---(red noExperimentStart((exp(((can a "basenji" "breath" ?) for 1) in 0))
                          (exp(((can a "dog" "move" ?) for 1) in 200))
                          (exp(((can a "dog" "bark" ?) for 1) in 300))) .)

---(red noPerceptionAvailable((exp(((can a "dog" "move" ?) for 1) in 200))
                          (perc((can a "basenji" "breath" ?) for 1))
                          (exp(((can a "dog" "bark" ?) for 1) in 300))) .)

quit