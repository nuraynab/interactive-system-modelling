# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'create_project.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import (QApplication, QWidget, QMessageBox)

from results import Ui_ResultsWindow

import MySQLdb as mdb
from contextlib import closing

import subprocess
import re

db = mdb.connect('127.0.0.1', 'root', '', 'interSys')

# sem_mem_dict = {}
# env_dict = {}
# exp_dict = {}
# stm_dict = {}

class Ui_RunProjectWindow(object):
    def setupUi(self, RunProjectWindow):
        RunProjectWindow.setObjectName("RunProjectWindow")
        RunProjectWindow.setFixedSize(480, 800)
        self.centralwidget = QtWidgets.QWidget(RunProjectWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(40, 10, 591, 51))
        self.label.setObjectName("label")
        font = QtGui.QFont()
        font.setPointSize(14)
        self.project_name = QtWidgets.QLabel(self.centralwidget)
        self.project_name.setGeometry(QtCore.QRect(40, 80, 351, 51))
        self.project_name.setObjectName("project_name")
        self.project_name.setFont(font)
        self.version_name = QtWidgets.QLabel(self.centralwidget)
        self.version_name.setGeometry(QtCore.QRect(40, 120, 351, 51))
        self.version_name.setObjectName("version_name")
        self.version_name.setFont(font)
        self.version_id = QtWidgets.QLabel(self.centralwidget)
        self.version_id.setGeometry(QtCore.QRect(0, 0, 0, 0))
        self.version_id.setObjectName("version_id")

        self.line = QtWidgets.QFrame(self.centralwidget)
        self.line.setGeometry(QtCore.QRect(0, 80, 1161, 16))
        self.line.setFrameShape(QtWidgets.QFrame.HLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(40, 170, 351, 51))
        self.label_2.setObjectName("label_2")
        self.label_2.setFont(font)
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(40, 270, 351, 51))
        self.label_4.setObjectName("label_4")
        self.label_4.setFont(font)
        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_5.setGeometry(QtCore.QRect(40, 370, 351, 51))
        self.label_5.setObjectName("label_5")
        self.label_5.setFont(font)
        self.label_6 = QtWidgets.QLabel(self.centralwidget)
        self.label_6.setGeometry(QtCore.QRect(40, 470, 351, 51))
        self.label_6.setObjectName("label_6")
        self.label_6.setFont(font)
        self.label_7 = QtWidgets.QLabel(self.centralwidget)
        self.label_7.setGeometry(QtCore.QRect(40, 570, 351, 51))
        self.label_7.setObjectName("label_7")
        self.label_7.setFont(font)
        self.stm_capacity = QtWidgets.QLineEdit(self.centralwidget)
        self.stm_capacity.setGeometry(QtCore.QRect(40, 220, 400, 41))
        self.stm_capacity.setObjectName("stm_capacity")
        self.stm_capacity.setFont(font)
        self.cogn_load = QtWidgets.QLineEdit(self.centralwidget)
        self.cogn_load.setGeometry(QtCore.QRect(40, 320, 400, 41))
        self.cogn_load.setObjectName("cogn_load")
        self.cogn_load.setFont(font)
        self.decay_time = QtWidgets.QLineEdit(self.centralwidget)
        self.decay_time.setGeometry(QtCore.QRect(40, 420, 400, 41))
        self.decay_time.setObjectName("decay_time")
        self.decay_time.setFont(font)
        self.in_time = QtWidgets.QLineEdit(self.centralwidget)
        self.in_time.setGeometry(QtCore.QRect(40, 520, 400, 41))
        self.in_time.setObjectName("in_time")
        self.in_time.setFont(font)
        self.rewrite_steps = QtWidgets.QLineEdit(self.centralwidget)
        self.rewrite_steps.setGeometry(QtCore.QRect(40, 620, 400, 41))
        self.rewrite_steps.setObjectName("rewrite_steps")
        self.rewrite_steps.setFont(font)
        self.runBtn = QtWidgets.QPushButton(self.centralwidget)
        self.runBtn.setGeometry(QtCore.QRect(195, 700, 90, 25))
        # self.runBtn.clicked.connect(self.create_project)
        self.runBtn.clicked.connect(RunProjectWindow.close)
        self.runBtn.setFont(font)
        self.runBtn.setObjectName("runBtn")
        RunProjectWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(RunProjectWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 553, 22))
        self.menubar.setObjectName("menubar")
        self.menuInteractive_System_Modelling = QtWidgets.QMenu(self.menubar)
        self.menuInteractive_System_Modelling.setObjectName("menuInteractive_System_Modelling")
        RunProjectWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(RunProjectWindow)
        self.statusbar.setObjectName("statusbar")
        RunProjectWindow.setStatusBar(self.statusbar)
        self.menubar.addAction(self.menuInteractive_System_Modelling.menuAction())

        self.retranslateUi(RunProjectWindow)
        QtCore.QMetaObject.connectSlotsByName(RunProjectWindow)

        self.runBtn.clicked.connect(self.run)

    def get_questions(self):
        version_id = int(self.version_id.text())
        db = mdb.connect('127.0.0.1', 'root', '', 'interSys')
        with closing(db.cursor()) as cur:
            cur.execute("""SELECT version_id, domain, item, value, categories, types, attributes FROM experiment WHERE version_id = '%i' AND item = 'question' 
                UNION SELECT version_id, domain, item, value, categories, types, attributes FROM environment WHERE version_id = '%i' AND item = 'question' """ % (version_id, version_id))
            questions = cur.fetchall()
        return questions

    def get_res_perc(self):
        perc = {}
        env_str = "perc"
        f = open("Maude-2/results.txt", "r")
        i = 0
        for line in f:
            i += 1
            if env_str in line:
                cur_line = str(line)
                mid_line = cur_line.split("<")
                new_line = mid_line[0].split("perc")
                n = len(new_line)
                for x in range(1, n):
                    start = new_line[x].find("(")+len("(")
                    end = new_line[x].find(" for")
                    mid = new_line[x][start:end]
                    start_t = new_line[x].find("for ")+len("for ")
                    end_t = new_line[x].find(")")
                    time = new_line[x][start_t:end_t]
                    perc[mid] = time
        f.close()
        return perc

    def get_res_stm(self):
        stm = {}
        stm_str = "decay"
        f = open("Maude-2/results.txt", "r")
        i = 0
        for line in f:
            i += 1
            if stm_str in line:
                new_line = str(line)
                if new_line.find("goal") != -1:
                    continue
                start = new_line.find("(chunk ")+len("(chunk ")
                end = new_line.find(" decay")
                mid = new_line[start:end]
                start_t = new_line.find("decay ")+len("decay ")
                end_t = new_line.find(" of")
                time = new_line[start_t:end_t]
                if (stm!="INF"):
                    stm[mid] = time
        f.close()
        return stm

    def get_res_time(self):
        time_str = "in time"
        f = open("Maude-2/results.txt", "r")
        i = 0
        for line in f:
            i += 1
            if time_str in line:
                new_line = str(line)
                start = new_line.find("} ")+len("} ")
                end = new_line.find("\nBye")
                mid = new_line[start:end]
        f.close()
        return mid

    def get_res_ans(self):
        ans = {}
        ans_str = "ans"
        f = open("Maude-2/results.txt", "r")
        i = 0
        for line in f:
            i += 1
            if ans_str in line:
                cur_line = str(line)
                start = cur_line.find("(")+len("(")
                end = cur_line.rfind("\"")
                item = cur_line[start:end+1]
                start_t = cur_line.rfind("\" ") + len("\" ")
                end_t = cur_line.find("for")
                time = cur_line[start_t:end_t]
                ans[item] = time
        f.close()
        return ans

    def get_sem_mem(self, version_id):
        sem_mem = {}
        with closing(db.cursor()) as cur:
            cur.execute("SELECT * FROM sem_mem WHERE version_id = '%i' ORDER BY id" % version_id)
            fact_repr = cur.fetchall()

            for y in fact_repr:
                sem_mem[y[3]] = [y[2], y[4], y[5], y[6], y[7]]
        return sem_mem

    def get_env(self, version_id):
        env = {}
        with closing(db.cursor()) as cur:
            cur.execute("SELECT * FROM environment WHERE version_id = '%i' ORDER BY id" % version_id)
            perc_repr = cur.fetchall()

            for y in perc_repr:
                env[y[4]] = [y[2], y[3], y[5], y[6], y[7], y[8]]
        return env

    def get_exp(self, version_id):
        exp = {}
        with closing(db.cursor()) as cur:
            cur.execute("SELECT * FROM experiment WHERE version_id = '%i' ORDER BY id" % (version_id))
            perc_repr = cur.fetchall()

            for y in perc_repr:
                exp[y[4]] = [y[2], y[3], y[6], y[7], y[8], y[9], y[5]]
        return exp

    def find_start_i(self, list_of_lines, start_str):
        i = 0
        for line in list_of_lines:
            i += 1
            if start_str in line:
                i += 1
                break
        return i

    def write_sem_mem_to_Maude(self, list_of_lines, sem_mem_dict):
        start_str = "op initSemanticMem : -> SemanticMemory ."
        i = self.find_start_i(list_of_lines, start_str)
        list_of_lines[i] = '  eq initSemanticMem =  \n'
        for y in sem_mem_dict:
            i += 1
            domain = sem_mem_dict[y][0]
            time = str(sem_mem_dict[y][1])
            cat = sem_mem_dict[y][2]
            typ = sem_mem_dict[y][3]
            attr = sem_mem_dict[y][4]
            addition = '("' + domain + '" : "' + cat + '" |- ' + time + ' ->| (' + typ + ' "' + attr + '")) \n'
            list_of_lines.insert(i, addition)
        list_of_lines[i + 1] = '.\n'
        f = open("Maude-2/proj/cifma-2020-2.maude", "w")
        f.writelines(list_of_lines)
        f.close()
        return list_of_lines

    def write_exp_to_Maude(self, list_of_lines, exp_dict):
        start_str = "semanticMem : initSemanticMem > ."
        i = self.find_start_i(list_of_lines, start_str)
        list_of_lines[i] = '  eq init = \n'
        for y in exp_dict:
            i += 1
            domain = exp_dict[y][0]
            item = exp_dict[y][1]
            time = str(exp_dict[y][2])
            cat = exp_dict[y][3]
            typ = exp_dict[y][4]
            attr = exp_dict[y][5]
            time_in = str(exp_dict[y][6])
            if item == "question":
                if typ == "is a":
                    addition = '(exp(((' + typ + ' "' + cat + '" "' + attr + '" ?) for ' + time + ') in ' + time_in + ')) \n'
                else:
                    addition = '(exp(((' + typ + ' a "' + cat + '" "' + attr + '" ?) for ' + time + ') in ' + time_in + ')) \n'
                list_of_lines.insert(i, addition)
            elif item == "fact":
                #     addition = '(exp(((a "'+cat+'" '+typ+' "'+attr+'") for '+time+') in '+time_in+')) \n'
                i -= 1
            # print (addition)
        return list_of_lines, i

    def write_env_to_Maude(self, list_of_lines, env_dict, i):
        for y in env_dict:
            i += 1
            domain = env_dict[y][0]
            item = env_dict[y][1]
            time = str(env_dict[y][2])
            cat = env_dict[y][3]
            typ = env_dict[y][4]
            attr = env_dict[y][5]
            if item == "question":
                addition = '(perc((' + typ + ' a "' + cat + '" "' + attr + '" ?) for ' + time + ')) \n'
                list_of_lines.insert(i, addition)
            elif item == "fact":
                #     addition = '(perc((a "'+cat+'" '+typ+' "'+attr+'") for '+time+')) \n'
                i -= 1

        list_of_lines[i + 1] = 'theHuman .\n'
        f = open("Maude-2/proj/cifma-2020-2.maude", "w")
        f.writelines(list_of_lines)
        f.close()
        return list_of_lines

    def show_results_window(self):
        self.ResultsWindow = QtWidgets.QMainWindow()
        self.ui = Ui_ResultsWindow()
        self.ui.setupUi(self.ResultsWindow)
        self.ui.label_2.setText(self.label.text())
        self.ui.label_3.setText(self.label_2.text())
        self.ui.version_id.setText(self.version_id.text())

        perc = self.get_res_perc()
        j = 0
        for item, time in perc.items():
            self.ui.envTableWidget.setRowCount(j + 1)
            self.ui.envTableWidget.setItem(j, 0, QtWidgets.QTableWidgetItem(item))
            self.ui.envTableWidget.setItem(j, 1, QtWidgets.QTableWidgetItem(time))
            j += 1

        stm = self.get_res_stm()
        j = 0
        for item, time in stm.items():
            self.ui.stmTableWidget.setRowCount(j + 1)
            self.ui.stmTableWidget.setItem(j, 0, QtWidgets.QTableWidgetItem(item))
            self.ui.stmTableWidget.setItem(j, 1, QtWidgets.QTableWidgetItem(time))
            j += 1

        in_time = self.get_res_time()
        self.ui.label_6.setText(in_time)

    def run(self):

        version_id = int(self.version_id.text())
        sem_mem_dict = self.get_sem_mem(version_id)
        env_dict = self.get_env(version_id)
        exp_dict = self.get_exp(version_id)

        f = open("Maude-2/proj/cifma-2020-2.maude", "r")
        list_of_lines = f.readlines()
        f.close()

        lookup = "op stmCapacity : -> Nat ."
        for i, line in enumerate(list_of_lines, 1):
            if lookup in line:
                break
        addition = "   eq stmCapacity = " + self.stm_capacity.text() + " .\n"
        list_of_lines[i] = addition
        f = open("Maude-2/proj/cifma-2020-2.maude", "w")
        f.writelines(list_of_lines)
        f.close()

        lookup = "eq theHuman = < human : Human | cognitiveLoad"
        for i, line in enumerate(list_of_lines, 1):
            if lookup in line:
                break
        addition = "  eq theHuman = < human : Human | cognitiveLoad : " + self.cogn_load.text() + ",\n"
        list_of_lines[i-1] = addition
        f = open("Maude-2/proj/cifma-2020-2.maude", "w")
        f.writelines(list_of_lines)
        f.close()

        lookup = "ops DECAY-TIME MAX-RETRIEVAL-TIME : -> TimeInf ."
        for i, line in enumerate(list_of_lines, 1):
            if lookup in line:
                break
        addition = "   eq DECAY-TIME = " + self.decay_time.text() + " .\n"
        list_of_lines[i] = addition
        f = open("Maude-2/proj/cifma-2020-2.maude", "w")
        f.writelines(list_of_lines)
        f.close()

        lookup = "quit"
        for i, line in enumerate(list_of_lines, 1):
            if lookup in line:
                break
        addition = "(trew [" + self.rewrite_steps.text() + "] in EXAMPLE-DOGS : {init} in time <= " + self.in_time.text() + " .)\n"
        list_of_lines[i-3] = addition
        f = open("Maude-2/proj/cifma-2020-2.maude", "w")
        f.writelines(list_of_lines)
        f.close()

        f = open("Maude-2/proj/cifma-2020-2.maude", "r")
        list_of_lines = f.readlines()
        f.close()

        list_of_lines = self.write_sem_mem_to_Maude(list_of_lines, sem_mem_dict)
        list_of_lines, i = self.write_exp_to_Maude(list_of_lines, exp_dict)
        list_of_lines = self.write_env_to_Maude(list_of_lines, env_dict, i)

        start_str = "ops init-STM : -> ShortTermMemory ."
        i=0
        for line in list_of_lines:
            i+=1
            if start_str in line:
                i+=1
                break
        list_of_lines[i] = '  eq init-STM = \n'
        for y in exp_dict:
            i+=1
            domain = exp_dict[y][0]
            item = exp_dict[y][1]
            if item=="question":
                addition = '(chunk goal("'+domain+'", foundAnswer, 0, 5) decay INF of DECAY-TIME) ; \n'
                list_of_lines.insert(i, addition)
            if item=="fact":
                i-=1
            # print (addition)               
            
        for y in env_dict:
            i+=1
            domain = env_dict[y][0]
            item = env_dict[y][1]
            if item=="question":
                addition = '(chunk goal("'+domain+'", foundAnswer, 0, 5) decay INF of DECAY-TIME) ; \n'
                list_of_lines.insert(i, addition)
            if item=="fact":
                i-=1
        list_of_lines[i] = list_of_lines[i][:-4]
        list_of_lines[i+1] = '\n .\n'

        f = open("Maude-2/proj/cifma-2020-2.maude", "w")
        f.writelines(list_of_lines)
        f.close()
        subprocess.call("./start_maude.sh")

        self.show_results_window()

        f = open("Maude-2/proj/cifma-2020-2.maude", "r")
        f2 = open("Maude-2/proj/cifma-2020-help.maude", "w")
        start_str = 'eq initSemanticMem ='
        end_str = '.'
        for line in f:
            if start_str in line:
                break
            f2.write(line)
        for line in f:
            if end_str in line:
                f2.write("\n\n")
                break
        for line in f:
            f2.write(line)
        f.close()
        f2.close()

        f = open("Maude-2/proj/cifma-2020-help.maude", "r")
        f2 = open("Maude-2/proj/cifma-2020-2.maude", "w")
        start_str = 'eq init-STM ='
        end_str = ' .'
        for line in f:
            if start_str in line:
                break
            f2.write(line)
        for line in f:
            if end_str in line:
                f2.write("\n\n")
                break
        for line in f:
            f2.write(line)
        f.close()
        f2.close()

        f = open("Maude-2/proj/cifma-2020-2.maude", "r")
        f2 = open("Maude-2/proj/cifma-2020-help.maude", "w")
        start_str = 'eq init ='
        end_str = 'theHuman .'
        for line in f:
            if start_str in line:
                break
            f2.write(line)
        for line in f:
            if end_str in line:
                f2.write("\n\n")
                break
        for line in f:
            f2.write(line)
        f.close()
        f2.close()

        f = open("Maude-2/proj/cifma-2020-help.maude", "r")
        f2 = open("Maude-2/proj/cifma-2020-2.maude", "w")
        for line in f:
            f2.write(line)
        f.close()
        f2.close()

        f = open("Maude-2/proj/cifma-2020-help.maude", "r")
        f2 = open("Maude-2/proj/cifma-2020-2.maude", "w")
        start_str = 'eq init-env ='
        end_str = 'aHuman .'
        for line in f:
            if start_str in line:
                break
            f2.write(line)
        for line in f:
            if end_str in line:
                f2.write("\n\n")
                break
        for line in f:
            f2.write(line)
        f.close()
        f2.close()

        self.ResultsWindow.show()

   

    def retranslateUi(self, RunProjectWindow):
        _translate = QtCore.QCoreApplication.translate
        RunProjectWindow.setWindowTitle(_translate("RunProjectWindow", "MainWindow"))
        self.label.setText(_translate("RunProjectWindow", "<html><head/><body><p><span style=\" font-size:28pt;\">Run Project</span></p></body></html>"))
        self.label_2.setText(_translate("RunProjectWindow", "<html><head/><body><p><span style=\" font-size:14pt;\">STM capacity</span></p></body></html>"))
        self.label_4.setText(_translate("RunProjectWindow", "<html><head/><body><p><span style=\" font-size:14pt;\">Cognitive Load</span></p></body></html>"))
        self.label_5.setText(_translate("RunProjectWindow", "<html><head/><body><p><span style=\" font-size:14pt;\">Decay time</span></p></body></html>"))
        self.label_6.setText(_translate("RunProjectWindow", "<html><head/><body><p><span style=\" font-size:14pt;\">In time</span></p></body></html>"))
        self.label_7.setText(_translate("RunProjectWindow", "<html><head/><body><p><span style=\" font-size:14pt;\">Number of rewrite steps</span></p></body></html>"))
        self.stm_capacity.setText(_translate("RunProjectWindow", "7"))
        self.cogn_load.setText(_translate("RunProjectWindow", "0"))
        self.decay_time.setText(_translate("RunProjectWindow", "100"))
        self.in_time.setText(_translate("RunProjectWindow", "1000"))
        self.rewrite_steps.setText(_translate("RunProjectWindow", "10000"))
        self.runBtn.setText(_translate("RunProjectWindow", "Run"))
        self.menuInteractive_System_Modelling.setTitle(_translate("RunProjectWindow", "1"))

